#ifndef VELLEZ_ESP8266_WEB_H
#define VELLEZ_ESP8266_WEB_H

#include <ESP.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <AsyncJson.h>

#include "callbacks.h"
#include "def_limits.h"
#include "settings.h"

#define WEB_PORT 80

const char webpage[] PROGMEM = R"lit(<!DOCTYPE html><html lang="en"><head> <title>Vellez Alert</title> <meta name="viewport" content="width=device-width, initial-scale=1"> <style>body{background-color: #222222; color: #DDDDDD; font-family: sans-serif; width: max-content; display: block; margin: auto;}h1{text-align: center;}fieldset{margin: 0.4em;}legend{background-color: #000; color: #fff; padding: 3px 6px;}label{display: block; margin: 0 .5em; font-size: 1em;}label > *{display: inline-block; margin: .5em 0;}button{font-size: 1em;}button:last-child{float: right;}input{margin: 0.2em auto; width: 99%; display: block; border: 0; border-radius: 0.2em; height: 2em;}#zones label:first-of-type{display: inline-block; width: 100%;}#zones label{text-align: center; display: inline-block; width: 1em; margin-bottom: 1em;}#actions input{width: 2em;}</style></head><body><h1>Vellez Alert</h1><fieldset disabled> <legend>Generic</legend> <label> Timezone <input name="tz" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> AP SSID <input name="ap_ssid" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> Web Username <input name="web_username" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> Web Password <input value="" name="web_password" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> NTP Host <input name="ntp_host" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> OTA Host <input name="ota_host" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> OTA Port <input name="ota_port" type="number" min="0" max="65535"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> OTA URI <input name="ota_uri" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label></fieldset><fieldset disabled> <legend>MQTT</legend> <label> MQTT Host <input name="mqtt_host" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Port <input name="mqtt_port" type="number" min="0" max="65535"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Client ID <input name="mqtt_client_id" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Username <input name="mqtt_username" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Password <input value="" name="mqtt_password" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Generic Topic <input name="mqtt_generic_topic" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> MQTT Telemetry Topic <input name="mqtt_telemetry_topic" maxlength="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label></fieldset><fieldset disabled> <legend>Vellez</legend> <label> Vellez Address <input name="vellez_address" type="number" min="1" max="5"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> Volume <input name="volume" type="number" min="0" max="30"> <button onclick="reset_sibling(this)">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><label> Gong <input id="gong" type="checkbox" onchange="read_gong()"> <button onclick="override_gong()">Set</button> <button onclick="reset_gong()">Default</button> <button name="save" onclick="save(this)">Save</button> </label> <br><fieldset id="zones"> <legend>Zones</legend> <label>All Zones <input id="all_zones" type="checkbox"></label> <br><label><input type="checkbox">1</label> <label><input type="checkbox">2</label> <label><input type="checkbox">3</label> <label><input type="checkbox">4</label> <label><input type="checkbox">5</label> <label><input type="checkbox">6</label> <label><input type="checkbox">7</label> <label><input type="checkbox">8</label> <br><label><input type="checkbox">9</label> <label><input type="checkbox">10</label> <label><input type="checkbox">11</label> <label><input type="checkbox">12</label> <label><input type="checkbox">13</label> <label><input type="checkbox">14</label> <label><input type="checkbox">15</label> <label><input type="checkbox">16</label> <br><button onclick="reset_zones()">Default</button> <button name="save" onclick="save(this)">Save</button> </fieldset></fieldset><fieldset id="actions" disabled> <legend>Actions</legend> <label>Track <input id="track_num" type="number" min="0" max="2999"></label> <button id="start_playback" onclick="start_playback(this)" disabled>Play</button> <button onclick="stop_playback(this)">Stop</button> <button onclick="reboot(this)">Reboot</button></fieldset></body><script>const success_color="#007b00"; const error_color="#7b0000"; const fieldsets=document.getElementsByTagName("fieldset"); const save_buttons=document.getElementsByName("save"); const gong=document.getElementById("gong"); const zones=document.getElementById("zones"); const zone_checkboxes=zones.querySelectorAll('input[type="checkbox"]:not([id="all_zones"])'); const all_zones_checkbox=document.getElementById("all_zones"); const start_playback_button=document.getElementById("start_playback"); let defaults={}; let gong_overridden=false; let zones_overridden=false; let initial_gong=false; let current_gong=false; let initial_zones=0; let current_zones=0; let track_num=null; function reset_sibling(el){el.parentElement.querySelector("input").value="";}function toggle_fieldsets(enabled){for (let f of fieldsets){if (enabled){f.removeAttribute("disabled");}else{f.disabled=true;}}}function toggle_save_buttons(enabled){for (let b of save_buttons){if (enabled){b.removeAttribute("disabled");}else{b.disabled=true;}}}function fill_data(data){for (const [key, value] of Object.entries(data["defaults"])){switch (key){case "gong": break; case "vellez_zones": break; default: try{document.getElementsByName(key)[0].placeholder=value;}catch (error){console.error(key, value, error.message);}}}for (const [key, value] of Object.entries(data["overrides"])){switch (key){case "gong": gong_overridden=value !==null; initial_gong=value !==null ? value : defaults["gong"]; break; case "vellez_zones": zones_overridden=value !==null; initial_zones=value !==null ? value : defaults["vellez_zones"]; break; default: try{document.getElementsByName(key)[0].value=value !==null ? value : "";}catch (error){console.error(key, value, error.message);}}}current_gong=initial_gong; current_zones=initial_zones; update_gong(); update_zones();}function override_gong(){gong_overridden=true; update_gong();}function update_gong(){if (gong_overridden){gong.removeAttribute("disabled");}else{gong.disabled=true;}gong.checked=current_gong;}function read_gong(){current_gong=gong.checked; gong_overridden=!gong.disabled && defaults["gong"] !==current_gong;}function reset_gong(){current_gong=defaults["gong"]; gong_overridden=false; update_gong();}function update_zones(){const bin_str=parseInt(current_zones).toString(2).padStart(16, "0"); for (let z in bin_str){zone_checkboxes[z].checked=bin_str[z]==="1";}all_zones_checkbox.checked=current_zones===65535;}function read_zones(){let bin_str=""; for (let i of zone_checkboxes){bin_str +=i.checked ? "1" : "0";}current_zones=parseInt(bin_str, 2); all_zones_checkbox.checked=current_zones===65535;}function reset_zones(){current_zones=defaults["vellez_zones"]; zones_overridden=false; update_zones();}async function load(){toggle_fieldsets(false); try{const response=await fetch("settings.json"); const data=await response.json(); defaults=data["defaults"]; fill_data(data); toggle_fieldsets(true);}catch (error){console.error(error.message);}}async function save(el){toggle_save_buttons(false); toggle_fieldsets(false); const is_zones=el.parentElement.id==="zones"; const input=el.parentElement.querySelector("input"); const is_gong=input.id==="gong"; const data={"overrides":{}}; if (is_zones){read_zones(); data["overrides"]["vellez_zones"]=zones_overridden ? current_zones : null;}else if (is_gong){read_gong(); data["overrides"]["gong"]=gong_overridden ? current_gong : null;}else if (input.type==="number"){data["overrides"][input.name]=input.value.length ? parseInt(input.value) : null;}else{data["overrides"][input.name]=input.value.length ? input.value : null;}try{const response=await fetch("settings.json",{method: "PATCH", credentials: "same-origin", headers:{"Content-Type": "application/json"}, body: JSON.stringify(data)}); el.style.color=response.status < 300 ? success_color : error_color; const new_data=await response.json(); defaults=new_data["defaults"]; fill_data(new_data); toggle_fieldsets(true); toggle_save_buttons(true);}catch (error){toggle_fieldsets(true); toggle_save_buttons(true); el.style.color=error_color; console.error(error.message);}}async function start_playback(el){try{const response=await fetch("/play",{method: "POST", credentials: "same-origin", headers:{"Content-Type": "application/json"}, body: JSON.stringify({track_num})}); el.style.color=response.status < 300 ? success_color : error_color;}catch (error){el.style.color=error_color; console.error(error.message);}}async function stop_playback(el){try{const response=await fetch("/stop",{method: "POST", credentials: "same-origin"}); el.style.color=response.status < 300 ? success_color : error_color;}catch (error){el.style.color=error_color; console.error(error.message);}}async function reboot(el){try{const response=await fetch("/reboot",{method: "POST", credentials: "same-origin"}); if (response.status < 300){window.location.reload();}else{el.style.color=error_color;}}catch (error){el.style.color=error_color; console.error(error.message);}}load(); for (let i of zone_checkboxes){i.addEventListener("change", read_zones); i.addEventListener("input", function (){zones_overridden=true;});}all_zones_checkbox.addEventListener("change", function (){for (let i of zone_checkboxes){i.checked=this.checked;}read_zones();}); all_zones_checkbox.addEventListener("input", function (){zones_overridden=true;}); document.getElementById("track_num").addEventListener("input", function (){const value=parseInt(this.value); track_num=(this.value.length && value >=0 && value < 10) ? value : null; if (track_num !=null){start_playback_button.removeAttribute("disabled");}else{start_playback_button.disabled=true;}});</script></html>)lit";

class Web {
public:
    Web();
    void begin(Settings &settings);
    void set_vellez_address_callback(void_uint8_callback_t callback);
    void set_vellez_gong_callback(void_bool_callback_t callback);
    void set_vellez_zones_callback(void_uint16_callback_t callback);
    void set_volume_callback(void_uint8_callback_t callback);
    void set_play_callback(void_uint8_callback_t callback);
    void set_stop_callback(void_callback_t callback);
    void set_reboot_callback(void_callback_t callback);
private:
    AsyncWebServer *server;
    Settings *_settings;
    const char *blank;
    const char *stars;
    void_uint8_callback_t vellez_address_callback;
    void_bool_callback_t vellez_gong_callback;
    void_uint16_callback_t vellez_zones_callback;
    void_uint8_callback_t volume_callback;
    void_uint8_callback_t play_callback;
    void_callback_t stop_callback;
    void_callback_t reboot_callback;
    static void handle_get_favicon(AsyncWebServerRequest *request);
    void handle_get_root(AsyncWebServerRequest *request);
    void handle_get_settings(AsyncWebServerRequest *request);
    void handle_patch_settings(AsyncWebServerRequest *request, JsonVariant &json);
    void handle_play(AsyncWebServerRequest *request, JsonVariant &json);
    void handle_stop(AsyncWebServerRequest *request);
    void handle_reboot(AsyncWebServerRequest *request);
    static void handle_not_found(AsyncWebServerRequest *request);
};

#endif // VELLEZ_ESP8266_WEB_H
